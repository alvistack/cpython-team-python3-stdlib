diff -urN python3-stdlib-extensions-3.6.5/3.7/Lib/lib2to3/main.py python3-stdlib-extensions-3.6.5+3.7/3.7/Lib/lib2to3/main.py
--- python3-stdlib-extensions-3.6.5/3.7/Lib/lib2to3/main.py	2018-03-29 13:57:55.000000000 +0200
+++ python3-stdlib-extensions-3.6.5+3.7/3.7/Lib/lib2to3/main.py	2018-05-31 01:50:49.000000000 +0200
@@ -80,7 +80,7 @@
             filename += self._append_suffix
         if orig_filename != filename:
             output_dir = os.path.dirname(filename)
-            if not os.path.isdir(output_dir):
+            if not os.path.isdir(output_dir) and output_dir:
                 os.makedirs(output_dir)
             self.log_message('Writing converted %s to %s.', orig_filename,
                              filename)
diff -urN python3-stdlib-extensions-3.6.5/3.7/Lib/lib2to3/pgen2/tokenize.py python3-stdlib-extensions-3.6.5+3.7/3.7/Lib/lib2to3/pgen2/tokenize.py
--- python3-stdlib-extensions-3.6.5/3.7/Lib/lib2to3/pgen2/tokenize.py	2018-03-29 13:57:55.000000000 +0200
+++ python3-stdlib-extensions-3.6.5+3.7/3.7/Lib/lib2to3/pgen2/tokenize.py	2018-05-31 01:50:49.000000000 +0200
@@ -48,6 +48,10 @@
 def group(*choices): return '(' + '|'.join(choices) + ')'
 def any(*choices): return group(*choices) + '*'
 def maybe(*choices): return group(*choices) + '?'
+def _combinations(*l):
+    return set(
+        x + y for x in l for y in l + ("",) if x.casefold() != y.casefold()
+    )
 
 Whitespace = r'[ \f\t]*'
 Comment = r'#[^\r\n]*'
@@ -74,7 +78,7 @@
 Single3 = r"[^'\\]*(?:(?:\\.|'(?!''))[^'\\]*)*'''"
 # Tail end of """ string.
 Double3 = r'[^"\\]*(?:(?:\\.|"(?!""))[^"\\]*)*"""'
-_litprefix = r"(?:[uUrRbBfF]|[rR][bB]|[bBuU][rR])?"
+_litprefix = r"(?:[uUrRbBfF]|[rR][fFbB]|[fFbBuU][rR])?"
 Triple = group(_litprefix + "'''", _litprefix + '"""')
 # Single-line ' or " string.
 String = group(_litprefix + r"'[^\n'\\]*(?:\\.[^\n'\\]*)*'",
@@ -105,59 +109,29 @@
 
 tokenprog, pseudoprog, single3prog, double3prog = list(map(
     re.compile, (Token, PseudoToken, Single3, Double3)))
+
+_strprefixes = (
+    _combinations('r', 'R', 'f', 'F') |
+    _combinations('r', 'R', 'b', 'B') |
+    {'u', 'U', 'ur', 'uR', 'Ur', 'UR'}
+)
+
 endprogs = {"'": re.compile(Single), '"': re.compile(Double),
             "'''": single3prog, '"""': double3prog,
-            "r'''": single3prog, 'r"""': double3prog,
-            "u'''": single3prog, 'u"""': double3prog,
-            "b'''": single3prog, 'b"""': double3prog,
-            "f'''": single3prog, 'f"""': double3prog,
-            "ur'''": single3prog, 'ur"""': double3prog,
-            "br'''": single3prog, 'br"""': double3prog,
-            "rb'''": single3prog, 'rb"""': double3prog,
-            "R'''": single3prog, 'R"""': double3prog,
-            "U'''": single3prog, 'U"""': double3prog,
-            "B'''": single3prog, 'B"""': double3prog,
-            "F'''": single3prog, 'F"""': double3prog,
-            "uR'''": single3prog, 'uR"""': double3prog,
-            "Ur'''": single3prog, 'Ur"""': double3prog,
-            "UR'''": single3prog, 'UR"""': double3prog,
-            "bR'''": single3prog, 'bR"""': double3prog,
-            "Br'''": single3prog, 'Br"""': double3prog,
-            "BR'''": single3prog, 'BR"""': double3prog,
-            "rB'''": single3prog, 'rB"""': double3prog,
-            "Rb'''": single3prog, 'Rb"""': double3prog,
-            "RB'''": single3prog, 'RB"""': double3prog,
-            'r': None, 'R': None,
-            'u': None, 'U': None,
-            'f': None, 'F': None,
-            'b': None, 'B': None}
-
-triple_quoted = {}
-for t in ("'''", '"""',
-          "r'''", 'r"""', "R'''", 'R"""',
-          "u'''", 'u"""', "U'''", 'U"""',
-          "b'''", 'b"""', "B'''", 'B"""',
-          "f'''", 'f"""', "F'''", 'F"""',
-          "ur'''", 'ur"""', "Ur'''", 'Ur"""',
-          "uR'''", 'uR"""', "UR'''", 'UR"""',
-          "br'''", 'br"""', "Br'''", 'Br"""',
-          "bR'''", 'bR"""', "BR'''", 'BR"""',
-          "rb'''", 'rb"""', "Rb'''", 'Rb"""',
-          "rB'''", 'rB"""', "RB'''", 'RB"""',):
-    triple_quoted[t] = t
-single_quoted = {}
-for t in ("'", '"',
-          "r'", 'r"', "R'", 'R"',
-          "u'", 'u"', "U'", 'U"',
-          "b'", 'b"', "B'", 'B"',
-          "f'", 'f"', "F'", 'F"',
-          "ur'", 'ur"', "Ur'", 'Ur"',
-          "uR'", 'uR"', "UR'", 'UR"',
-          "br'", 'br"', "Br'", 'Br"',
-          "bR'", 'bR"', "BR'", 'BR"',
-          "rb'", 'rb"', "Rb'", 'Rb"',
-          "rB'", 'rB"', "RB'", 'RB"',):
-    single_quoted[t] = t
+            **{f"{prefix}'''": single3prog for prefix in _strprefixes},
+            **{f'{prefix}"""': double3prog for prefix in _strprefixes},
+            **{prefix: None for prefix in _strprefixes}}
+
+triple_quoted = (
+    {"'''", '"""'} |
+    {f"{prefix}'''" for prefix in _strprefixes} |
+    {f'{prefix}"""' for prefix in _strprefixes}
+)
+single_quoted = (
+    {"'", '"'} |
+    {f"{prefix}'" for prefix in _strprefixes} |
+    {f'{prefix}"' for prefix in _strprefixes}
+)
 
 tabsize = 8
 
diff -urN python3-stdlib-extensions-3.6.5/3.7/Lib/lib2to3/refactor.py python3-stdlib-extensions-3.6.5+3.7/3.7/Lib/lib2to3/refactor.py
--- python3-stdlib-extensions-3.6.5/3.7/Lib/lib2to3/refactor.py	2018-03-29 13:57:55.000000000 +0200
+++ python3-stdlib-extensions-3.6.5+3.7/3.7/Lib/lib2to3/refactor.py	2018-05-31 01:50:49.000000000 +0200
@@ -314,7 +314,7 @@
             encoding = tokenize.detect_encoding(f.readline)[0]
         finally:
             f.close()
-        with io.open(filename, "r", encoding=encoding) as f:
+        with io.open(filename, "r", encoding=encoding, newline='') as f:
             return f.read(), encoding
 
     def refactor_file(self, filename, write=False, doctests_only=False):
diff -urN python3-stdlib-extensions-3.6.5/3.7/Lib/lib2to3/tests/data/crlf.py python3-stdlib-extensions-3.6.5+3.7/3.7/Lib/lib2to3/tests/data/crlf.py
--- python3-stdlib-extensions-3.6.5/3.7/Lib/lib2to3/tests/data/crlf.py	2018-03-29 13:57:55.000000000 +0200
+++ python3-stdlib-extensions-3.6.5+3.7/3.7/Lib/lib2to3/tests/data/crlf.py	2018-05-31 01:50:49.000000000 +0200
@@ -1,3 +1,3 @@
-print "hi"
-
-print "Like bad Windows newlines?"
+print "hi"
+
+print "Like bad Windows newlines?"
diff -urN python3-stdlib-extensions-3.6.5/3.7/Lib/lib2to3/tests/data/py3_test_grammar.py python3-stdlib-extensions-3.6.5+3.7/3.7/Lib/lib2to3/tests/data/py3_test_grammar.py
--- python3-stdlib-extensions-3.6.5/3.7/Lib/lib2to3/tests/data/py3_test_grammar.py	2018-03-29 13:57:55.000000000 +0200
+++ python3-stdlib-extensions-3.6.5+3.7/3.7/Lib/lib2to3/tests/data/py3_test_grammar.py	2018-05-31 01:50:49.000000000 +0200
@@ -147,6 +147,8 @@
 the \'lazy\' dog.\n\
 '
         self.assertEquals(x, y)
+        x = rf"hello \{True}"; y = f"hello \\{True}"
+        self.assertEquals(x, y)
 
     def testEllipsis(self):
         x = ...
diff -urN python3-stdlib-extensions-3.6.5/3.7/Lib/lib2to3/tests/test_refactor.py python3-stdlib-extensions-3.6.5+3.7/3.7/Lib/lib2to3/tests/test_refactor.py
--- python3-stdlib-extensions-3.6.5/3.7/Lib/lib2to3/tests/test_refactor.py	2018-03-29 13:57:55.000000000 +0200
+++ python3-stdlib-extensions-3.6.5+3.7/3.7/Lib/lib2to3/tests/test_refactor.py	2018-05-31 01:50:49.000000000 +0200
@@ -180,32 +180,42 @@
     def check_file_refactoring(self, test_file, fixers=_2TO3_FIXERS,
                                options=None, mock_log_debug=None,
                                actually_write=True):
-        tmpdir = tempfile.mkdtemp(prefix="2to3-test_refactor")
-        self.addCleanup(shutil.rmtree, tmpdir)
-        # make a copy of the tested file that we can write to
-        shutil.copy(test_file, tmpdir)
-        test_file = os.path.join(tmpdir, os.path.basename(test_file))
-        os.chmod(test_file, 0o644)
-
-        def read_file():
-            with open(test_file, "rb") as fp:
-                return fp.read()
-
-        old_contents = read_file()
+        test_file = self.init_test_file(test_file)
+        old_contents = self.read_file(test_file)
         rt = self.rt(fixers=fixers, options=options)
         if mock_log_debug:
             rt.log_debug = mock_log_debug
 
         rt.refactor_file(test_file)
-        self.assertEqual(old_contents, read_file())
+        self.assertEqual(old_contents, self.read_file(test_file))
 
         if not actually_write:
             return
         rt.refactor_file(test_file, True)
-        new_contents = read_file()
+        new_contents = self.read_file(test_file)
         self.assertNotEqual(old_contents, new_contents)
         return new_contents
 
+    def init_test_file(self, test_file):
+        tmpdir = tempfile.mkdtemp(prefix="2to3-test_refactor")
+        self.addCleanup(shutil.rmtree, tmpdir)
+        shutil.copy(test_file, tmpdir)
+        test_file = os.path.join(tmpdir, os.path.basename(test_file))
+        os.chmod(test_file, 0o644)
+        return test_file
+
+    def read_file(self, test_file):
+        with open(test_file, "rb") as fp:
+            return fp.read()
+
+    def refactor_file(self, test_file, fixers=_2TO3_FIXERS):
+        test_file = self.init_test_file(test_file)
+        old_contents = self.read_file(test_file)
+        rt = self.rt(fixers=fixers)
+        rt.refactor_file(test_file, True)
+        new_contents = self.read_file(test_file)
+        return old_contents, new_contents
+
     def test_refactor_file(self):
         test_file = os.path.join(FIXER_DIR, "parrot_example.py")
         self.check_file_refactoring(test_file, _DEFAULT_FIXERS)
@@ -285,6 +295,12 @@
         finally:
             os.linesep = old_sep
 
+    def test_crlf_unchanged(self):
+        fn = os.path.join(TEST_DATA_DIR, "crlf.py")
+        old, new = self.refactor_file(fn)
+        self.assertIn(b"\r\n", old)
+        self.assertIn(b"\r\n", new)
+
     def test_refactor_docstring(self):
         rt = self.rt()
 
diff -urN python3-stdlib-extensions-3.6.5/3.7/Lib/tkinter/__init__.py python3-stdlib-extensions-3.6.5+3.7/3.7/Lib/tkinter/__init__.py
--- python3-stdlib-extensions-3.6.5/3.7/Lib/tkinter/__init__.py	2018-03-29 13:57:55.000000000 +0200
+++ python3-stdlib-extensions-3.6.5+3.7/3.7/Lib/tkinter/__init__.py	2018-05-31 01:50:49.000000000 +0200
@@ -3533,7 +3533,7 @@
             self.tk.call('image', 'width', self.name))
 
 class PhotoImage(Image):
-    """Widget which can display colored images in GIF, PPM/PGM format."""
+    """Widget which can display images in PGM, PPM, GIF, PNG format."""
     def __init__(self, name=None, cnf={}, master=None, **kw):
         """Create an image with NAME.
 
@@ -3597,7 +3597,7 @@
         self.tk.call(args)
 
 class BitmapImage(Image):
-    """Widget which can display a bitmap."""
+    """Widget which can display images in XBM format."""
     def __init__(self, name=None, cnf={}, master=None, **kw):
         """Create a bitmap with NAME.
 
